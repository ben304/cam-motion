// Generated by CoffeeScript 1.6.2
var app, colors, config, ejs, express, io, manager, players, playing, ranking, server;

express = require('express');

app = express();

ejs = require('ejs');

server = require('http').createServer(app);

io = require('socket.io').listen(server);

colors = require('colors');

config = require('./config');

server.listen(8081);

app.use(express["static"](config.root_path));

app.engine('ejs', ejs.__express);

app.set('view engine', 'ejs');

app.set('views', __dirname);

manager = "";

ranking = "";

players = {
  a: "",
  b: ""
};

playing = false;

app.get('/', function(req, res) {
  return res.sendfile(config.root_path + '/game.html');
});

app.get('/manage', function(req, res) {
  return res.render('manage');
});

io.sockets.on('connection', function(socket) {
  socket.on('manager', function() {
    return manager = socket.id;
  });
  return socket.on('ranking_list', function() {
    ranking = socket.id;
    socket.on('new_player', function(data) {
      if (playing) {
        return;
      }
      players[data.player] = {
        id: socket.id,
        name: "",
        isend: false,
        score: 0
      };
      return io.sockets[manager].emit('player_update', players);
    });
    socket.on('ready', function(data) {
      players['a']['name'] = data.namea;
      players['b']['name'] = data.nameb;
      players['a']['isend'] = false;
      players['b']['isend'] = false;
      return socket.broadcast.emit('ready', data);
    });
    socket.on('begin', function(data) {
      playing = true;
      return socket.broadcast.emit('start');
    });
    socket.on('score_update', function(data) {
      return io.sockets[ranking].emit('score_update', data);
    });
    return socket.on('end', function(data) {
      var player, playera, playerb;

      player = players[data.player];
      playera = players['a'];
      playerb = players['b'];
      player.isend = true;
      player.score = data.sum;
      config.records.push(player);
      config.save_records();
      if (playera.isend && playerb.isend) {
        playing = false;
        return io.sockets[ranking].emit('end', players);
      }
    });
  });
});
