// Generated by CoffeeScript 1.3.3
var $, FPS, HEIGHT, SENS, WIDTH, calPos, cv1, cv2, cv3, cv4, dealWithFrame, drawArea, filter, vi;

$ = KISSY.all;

FPS = 1000 / 30;

WIDTH = 100;

HEIGHT = 75;

SENS = 120;

$('canvas').add('#vi').attr({
  width: WIDTH,
  height: HEIGHT
});

vi = $('#vi')[0];

cv1 = $('#cv1')[0].getContext('2d');

cv2 = $('#cv2')[0].getContext('2d');

cv3 = $('#cv3')[0].getContext('2d');

cv4 = $('#cv4')[0].getContext('2d');

drawArea = function(area) {
  var imageData, pos, _i, _len;
  if (!area || !area.length) {
    return;
  }
  imageData = cv3.createImageData(WIDTH, HEIGHT);
  for (_i = 0, _len = area.length; _i < _len; _i++) {
    pos = area[_i];
    imageData.data[pos * 4 + 1] = 255;
    imageData.data[pos * 4 + 3] = 255;
  }
  return cv3.putImageData(imageData, 0, 0);
};

calPos = function(poses, width, height) {
  var a, area, areas, bo, index, line, maxLen, maxLenIndex, pos, x, _i, _j, _len, _len1;
  areas = [];
  maxLen = 0;
  maxLenIndex = 0;
  for (_i = 0, _len = poses.length; _i < _len; _i++) {
    pos = poses[_i];
    line = Math.floor(pos / width);
    x = pos % width;
    a = [];
    if (line !== 0) {
      a.push((line - 1) * width + x);
    }
    if (x !== width - 1) {
      a.push(pos + 1);
    }
    if (line !== height - 1) {
      a.push((line + 1) * width + x);
    }
    if (x !== 0) {
      a.push(pos - 1);
    }
    bo = false;
    for (index = _j = 0, _len1 = areas.length; _j < _len1; index = ++_j) {
      area = areas[index];
      bo = area.some(function(key) {
        return a.indexOf(key) !== -1;
      });
      if (bo) {
        areas[index].push(pos);
        if (area.length > maxLen) {
          maxLen = area.length;
          maxLenIndex = index;
        }
        break;
      }
    }
    if (!bo) {
      areas.push([pos]);
    }
  }
  return drawArea(areas[maxLenIndex]);
};

filter = function(imageData, color) {
  var bo, data, height, key, pixel, pos, tmp, width, _i, _j, _ref;
  width = imageData.width;
  height = imageData.height;
  data = imageData.data;
  tmp = [];
  for (pos = _i = 0, _ref = width * height; 0 <= _ref ? _i < _ref : _i > _ref; pos = 0 <= _ref ? ++_i : --_i) {
    pixel = pos * 4;
    bo = false;
    for (key = _j = 0; _j < 3; key = ++_j) {
      if (!(bo = data[pixel + key] <= color[key] + SENS && data[pixel + key] >= color[key] - SENS)) {
        break;
      }
    }
    if (bo) {
      tmp.push(pos);
    } else {
      imageData.data[pixel + 3] = 0;
    }
  }
  return calPos(tmp, width, height);
};

dealWithFrame = function(imageData) {
  var time1, time2;
  time1 = new Date().getTime();
  filter(imageData, [255, 0, 0]);
  time2 = new Date().getTime();
  cv2.putImageData(imageData, 0, 0);
  return console.log(time2 - time1);
};

navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;

navigator.getUserMedia({
  video: true
}, function(stream) {
  vi.src = window.URL.createObjectURL(stream);
  return setInterval(function() {
    cv1.drawImage(vi, 0, 0, WIDTH, HEIGHT);
    return dealWithFrame(cv1.getImageData(0, 0, WIDTH, HEIGHT));
  }, FPS);
});
